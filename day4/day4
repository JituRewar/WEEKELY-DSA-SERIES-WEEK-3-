# ðŸš€ Day 4 - Search a 2D Matrix II (#240)

## ðŸ“˜ Problem
**LeetCode #240 â€” Search a 2D Matrix II**

Write an efficient algorithm that searches for a value in an `m x n` matrix.  
This matrix has the following properties:
- Integers in each row are sorted in ascending order from left to right.
- Integers in each column are sorted in ascending order from top to bottom.

### ðŸ”— Problem Link
[LeetCode #240 - Search a 2D Matrix II](https://leetcode.com/problems/search-a-2d-matrix-ii/)

---

## ðŸ’¡ Approach
- Start from the **top-right corner** of the matrix.
- If the current element is greater than the target â†’ move **left**.
- If the current element is smaller than the target â†’ move **down**.
- Continue until the element is found or indices go out of bounds.

This works because each row and column is sorted.

---

## ðŸ§  Complexity
- **Time:** O(m + n)  
- **Space:** O(1)

---

## code
   class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size(),n=matrix[0].size();
        int r=0,c=n-1;
        while(r<m&& c>=0){
            if(matrix[r][c]==target){
                return true;
            }
            else if(matrix[r][c]<target){
                r++;
            }
            else{
                c--;
            }
        }
        return false;
    }
};
